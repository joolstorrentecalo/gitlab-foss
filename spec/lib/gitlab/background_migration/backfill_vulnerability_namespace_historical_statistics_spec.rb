# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::BackgroundMigration::BackfillVulnerabilityNamespaceHistoricalStatistics, feature_category: :vulnerability_management do
  let(:namespaces) { table(:namespaces) }
  let(:projects) { table(:projects) }
  let(:vulnerability_historical_statistics) { table(:vulnerability_historical_statistics) }
  let(:vulnerability_namespace_historical_statistics) { table(:vulnerability_namespace_historical_statistics) }

  let!(:root_group_namespace) do
    namespaces.create!(name: 'root-group', path: 'root-group', type: 'Group')
  end

  let!(:group_namespace) do
    namespaces.create!(name: 'group', path: 'group', parent_id: root_group_namespace.id, type: 'Group')
  end

  let!(:sub_group_namespace) do
    namespaces.create!(name: 'subgroup', path: 'subgroup', parent_id: group_namespace.id, type: 'Group')
  end

  let!(:project_namespace_1) do
    namespaces.create!(name: 'Project Namespace 1', parent_id: root_group_namespace.id, path: 'project_1')
  end

  let!(:project_namespace_2) do
    namespaces.create!(name: 'Project Namespace 2', parent_id: group_namespace.id, path: 'project_2')
  end

  let!(:project_namespace_3) do
    namespaces.create!(name: 'Project Namespace 3', parent_id: sub_group_namespace.id, path: 'project_3')
  end

  let!(:project_namespace_4) do
    namespaces.create!(name: 'Project Namespace 4', parent_id: sub_group_namespace.id, path: 'project_4')
  end

  let!(:project_1) do
    projects.create!(
      name: "project_1",
      path: "project_1",
      namespace_id: root_group_namespace.id,
      project_namespace_id: project_namespace_1.id
    )
  end

  let!(:project_2) do
    projects.create!(
      name: "project_2",
      path: "project_2",
      namespace_id: group_namespace.id,
      project_namespace_id: project_namespace_2.id
    )
  end

  let!(:project_3) do
    projects.create!(
      name: "project_3",
      path: "project_3",
      namespace_id: sub_group_namespace.id,
      project_namespace_id: project_namespace_3.id
    )
  end

  let!(:project_4) do
    projects.create!(
      name: "project_4",
      path: "project_4",
      namespace_id: sub_group_namespace.id,
      project_namespace_id: project_namespace_4.id
    )
  end

  let!(:projects_array) { [project_1, project_2, project_3, project_4] }

  2.times do |i|
    4.times do |j|
      let!("vulnerability_historical_statistics_#{i}_#{j}") do
        vulnerability_historical_statistics.create!(
          project_id: projects_array[j].id,
          critical: i + 1,
          medium: i + 1,
          total: (i + 1) * 2,
          letter_grade: Vulnerabilities::Statistic.letter_grades[:d],
          date: DateTime.parse("2024-01-0#{i + 1}"),
          created_at: DateTime.parse("2024-01-01-16:20:20"),
          updated_at: DateTime.parse("2024-01-01-16:20:25")
        )
      end
    end
  end

  # rubocop:disable RSpec/ScatteredLet -- dynamically created instances
  let(:migration_instance) do
    described_class.new(
      start_id: vulnerability_historical_statistics.minimum(:id),
      end_id: vulnerability_historical_statistics.maximum(:id),
      batch_table: :vulnerability_historical_statistics,
      batch_column: :id,
      sub_batch_size: 100,
      pause_ms: 0,
      connection: ApplicationRecord.connection
    )
  end
  # rubocop:enable RSpec/ScatteredLet

  subject(:perform_migration) { migration_instance.perform }

  before do
    root_group_namespace.update!(traversal_ids: [root_group_namespace.id])
    group_namespace.update!(traversal_ids: [root_group_namespace.id, group_namespace.id])
    sub_group_namespace.update!(traversal_ids: [root_group_namespace.id, group_namespace.id, sub_group_namespace.id])
    # for validating greater letter_grade is taken
    vulnerability_historical_statistics_1_3.update!(letter_grade: Vulnerabilities::Statistic.letter_grades[:f])
    # for validating greater updated_at is taken
    vulnerability_historical_statistics_1_3.update!(updated_at: DateTime.parse("2024-01-01-16:20:50"))
  end

  it 'inserts aggregated data' do
    expect { perform_migration }.to change { vulnerability_namespace_historical_statistics.count }.from(0).to(6)
  end

  it 'create entries for each group for each date' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: root_group_namespace.traversal_ids).count).to eq(2)
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: group_namespace.traversal_ids).count).to eq(2)
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: sub_group_namespace.traversal_ids).count).to eq(2)
  end

  it 'sum the counters' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: root_group_namespace.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([2, 1, 1, 3])
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: root_group_namespace.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])

    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: group_namespace.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([2, 1, 1, 3])
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: group_namespace.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])

    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: sub_group_namespace.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: sub_group_namespace.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([8, 4, 4, 4])
  end

  it 'save timestamps' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: root_group_namespace.traversal_ids, date: "2024-01-01")
             .pick(:created_at)).to eq(vulnerability_historical_statistics_0_0.created_at)

    expect(vulnerability_namespace_historical_statistics
             .where(traversal_ids: sub_group_namespace.traversal_ids, date: "2024-01-02")
             .pick(:updated_at)).to eq(vulnerability_historical_statistics_1_3.updated_at)
  end
end
